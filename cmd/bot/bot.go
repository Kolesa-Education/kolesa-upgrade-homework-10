package bot

import (
	"fmt"
	"gopkg.in/telebot.v3"
	"kolesa-upgrade-homework-10/internal/models"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"
)

type UpgradeBot struct {
	Bot   *telebot.Bot
	Users *models.UserModel
	Tasks *models.TaskModel
}

var gameItems = [3]string{
	"–∫–∞–º–µ–Ω—å",
	"–Ω–æ–∂–Ω–∏—Ü—ã",
	"–±—É–º–∞–≥–∞",
}

var winSticker = &telebot.Sticker{
	File:     telebot.File{FileID: "CAACAgIAAxkBAAEGMEZjVspD4JulorxoH7nIwco5PGoCsAACJwADr8ZRGpVmnh4Ye-0RKgQ"},
	Width:    512,
	Height:   512,
	Animated: true,
}

var loseSticker = &telebot.Sticker{
	File: telebot.File{
		FileID: "CAACAgIAAxkBAAEGMEhjVsqoRriJRO_d-hrqguHNlLyLvQACogADFkJrCuweM-Hw5ackKgQ",
	},
	Width:    512,
	Height:   512,
	Animated: true,
}

func (bot *UpgradeBot) StartHandler(ctx telebot.Context) error {
	newUser := models.User{
		Name:       ctx.Sender().Username,
		TelegramId: ctx.Chat().ID,
		FirstName:  ctx.Sender().FirstName,
		LastName:   ctx.Sender().LastName,
		ChatId:     ctx.Chat().ID,
	}

	existUser, err := bot.Users.FindOne(ctx.Chat().ID)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
	}

	if existUser == nil {
		err := bot.Users.Create(newUser)

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
		}
	}

	return ctx.Send("–ü—Ä–∏–≤–µ—Ç, " + ctx.Sender().FirstName +
		"\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n" +
		"/addTask –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å: " +
		"\n\t >–Ω–∞–∑–≤–∞–Ω–∏–µ–º" +
		"\n\t >–æ–ø–∏—Å–∞–Ω–∏–µ–º" +
		"\n\t >–¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥\n" +
		"/tasks –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á \n" +
		"/deleteTask —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É id")
}

func (bot *UpgradeBot) AddHandler(ctx telebot.Context) error {
	attempts := ctx.Args()

	existUser, err := bot.Users.FindOne(ctx.Chat().ID)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
	}

	newTask := models.Task{
		Title:       attempts[0],
		Description: attempts[1],
		EndDate:     attempts[2],
		UserID:      existUser.ID,
	}

	err = bot.Tasks.Create(newTask)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ %v", err)
	}

	resStr := fmt.Sprintf(
		`–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: 
			%s
			%s
			–¥–æ %s`, newTask.Title, newTask.Description, newTask.EndDate,
	)
	return ctx.Send(resStr)
}

func (bot *UpgradeBot) AllTaskHandler(ctx telebot.Context) error {

	existUser, err := bot.Users.FindOne(ctx.Chat().ID)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
	}

	tasks, err := bot.Tasks.GetAll(existUser.ID)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ %v", err)
	}

	list := make([]string, 0)

	for _, data := range tasks {
		str := fmt.Sprintf(
			`ID:  %d
					–ó–∞–¥–∞—á–∞:  %s
					–û–ø–∏—Å–∞–Ω–∏–µ:  %s
					–î–µ–¥–ª–∞–π–Ω:  %s`,
			data.ID,
			data.Title,
			data.Description,
			data.EndDate,
		)
		list = append(list, str)
	}

	resStr := strings.Join(list, "\n\n")

	return ctx.Send(resStr)
}

func (bot *UpgradeBot) DeleteHandler(ctx telebot.Context) error {
	attempts := ctx.Args()

	if len(attempts) == 0 {
		return ctx.Send("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏")
	}

	if len(attempts) > 1 {
		return ctx.Send("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ " +
			"–≤–≤–µ–¥–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–π")
	}

	taskID, err := strconv.Atoi(attempts[0])

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–∞ ID %v", err)
	}

	err = bot.Tasks.DeleteById(taskID)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ %v", err)
	}

	resStr := fmt.Sprintf("–ó–∞–¥–∞—á–∞ ‚Ññ%d —É–¥–∞–ª–µ–Ω–∞", taskID)

	return ctx.Send(resStr)
}

func (bot *UpgradeBot) GameHandler(ctx telebot.Context) error {
	return ctx.Send("–°—ã–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ " +
		"–í–≤–µ–¥–∏ —Ç–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ /try –∫–∞–º–µ–Ω—å")
}

func (bot *UpgradeBot) TryHandler(ctx telebot.Context) error {
	attempts := ctx.Args()

	if len(attempts) == 0 {
		return ctx.Send("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç")
	}

	if len(attempts) > 1 {
		return ctx.Send("–í—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
	}

	try := strings.ToLower(attempts[0])
	botTry := gameItems[rand.Intn(3)]

	if botTry == "–∫–∞–º–µ–Ω—å" {
		switch try {
		case "–Ω–æ–∂–Ω–∏—Ü—ã":
			ctx.Send(loseSticker)
			ctx.Send("ü™®")
			return ctx.Send("–ö–∞–º–µ–Ω—å! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
		case "–±—É–º–∞–≥–∞":
			ctx.Send(winSticker)
			ctx.Send("ü™®")
			return ctx.Send("–ö–∞–º–µ–Ω—å! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
		}
	}

	if botTry == "–Ω–æ–∂–Ω–∏—Ü—ã" {
		switch try {
		case "–±—É–º–∞–≥–∞":
			ctx.Send(loseSticker)
			ctx.Send("‚úÇ")
			return ctx.Send("–ù–æ–∂–Ω–∏—Ü—ã! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
		case "–∫–∞–º–µ–Ω—å":
			ctx.Send(winSticker)
			ctx.Send("‚úÇ")
			return ctx.Send("–ù–æ–∂–Ω–∏—Ü—ã! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
		}
	}

	if botTry == "–±—É–º–∞–≥–∞" {
		switch try {
		case "–Ω–æ–∂–Ω–∏—Ü—ã":
			ctx.Send(winSticker)
			ctx.Send("üìÉ")
			return ctx.Send("–ë—É–º–∞–≥–∞! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
		case "–∫–∞–º–µ–Ω—å":
			ctx.Send(loseSticker)
			ctx.Send("üìÉ")
			return ctx.Send("–ë—É–º–∞–≥–∞! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
		}
	}

	if botTry == try {
		return ctx.Send("–ù–∏—á—å—è!")
	}

	return ctx.Send("–ö–∞–∂–µ—Ç—Å—è –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
}

func InitBot(token string) *telebot.Bot {
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	b, err := telebot.NewBot(pref)

	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ %v", err)
	}

	return b
}
