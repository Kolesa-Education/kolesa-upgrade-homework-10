package bot

import (
	"log"
	"math/rand"
	"strings"
	"time"
	"upgrade/internal/models"

	"gopkg.in/telebot.v3"
)

type UpgradeBot struct {
	Bot   *telebot.Bot
	Users *models.UserModel
	Tasks *models.TaskModel
}

var gameItems = [3]string{
	"–∫–∞–º–µ–Ω—å",
	"–Ω–æ–∂–Ω–∏—Ü—ã",
	"–±—É–º–∞–≥–∞",
}

var winSticker = &telebot.Sticker{
	File: telebot.File{
		FileID: "CAACAgIAAxkBAAEGMEZjVspD4JulorxoH7nIwco5PGoCsAACJwADr8ZRGpVmnh4Ye-0RKgQ",
	},
	Width:    512,
	Height:   512,
	Animated: true,
}

var loseSticker = &telebot.Sticker{
	File: telebot.File{
		FileID: "CAACAgIAAxkBAAEGMEhjVsqoRriJRO_d-hrqguHNlLyLvQACogADFkJrCuweM-Hw5ackKgQ",
	},
	Width:    512,
	Height:   512,
	Animated: true,
}

func (bot *UpgradeBot) StartHandler(ctx telebot.Context) error {
	newUser := models.User{
		Name:       ctx.Sender().Username,
		TelegramId: ctx.Sender().ID,
		FirstName:  ctx.Sender().FirstName,
		LastName:   ctx.Sender().LastName,
		ChatId:     ctx.Chat().ID,
	}

	existUser, err := bot.Users.FindOne(ctx.Sender().ID)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
	}

	if existUser == nil {
		err := bot.Users.Create(newUser)

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
		}
	}

	return ctx.Send("–ü—Ä–∏–≤–µ—Ç, " + ctx.Sender().FirstName)
}

func (bot *UpgradeBot) GameHandler(ctx telebot.Context) error {
	return ctx.Send("–°—ã–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ " +
		"–í–≤–µ–¥–∏ —Ç–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ /try –∫–∞–º–µ–Ω—å")
}

func (bot *UpgradeBot) TryHandler(ctx telebot.Context) error {
	attempts := ctx.Args()

	if len(attempts) == 0 {
		return ctx.Send("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç")
	}

	if len(attempts) > 1 {
		return ctx.Send("–í—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
	}

	try := strings.ToLower(attempts[0])
	botTry := gameItems[rand.Intn(len(gameItems))]

	if botTry == "–∫–∞–º–µ–Ω—å" {
		switch try {
		case "–Ω–æ–∂–Ω–∏—Ü—ã":
			ctx.Send(loseSticker)
			ctx.Send("ü™®")
			return ctx.Send("–ö–∞–º–µ–Ω—å! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
		case "–±—É–º–∞–≥–∞":
			ctx.Send(winSticker)
			ctx.Send("ü™®")
			return ctx.Send("–ö–∞–º–µ–Ω—å! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
		}
	}

	if botTry == "–Ω–æ–∂–Ω–∏—Ü—ã" {
		switch try {
		case "–∫–∞–º–µ–Ω—å":
			ctx.Send(winSticker)
			ctx.Send("‚úÇÔ∏è")
			return ctx.Send("–ù–æ–∂–Ω–∏—Ü—ã! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
		case "–±—É–º–∞–≥–∞":
			ctx.Send(loseSticker)
			ctx.Send("‚úÇÔ∏è")
			return ctx.Send("–ù–æ–∂–Ω–∏—Ü—ã! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
		}
	}

	if botTry == "–±—É–º–∞–≥–∞" {
		switch try {
		case "–Ω–æ–∂–Ω–∏—Ü—ã":
			ctx.Send(winSticker)
			ctx.Send("üìÉ")
			return ctx.Send("–ë—É–º–∞–≥–∞! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
		case "–∫–∞–º–µ–Ω—å":
			ctx.Send(loseSticker)
			ctx.Send("üìÉ")
			return ctx.Send("–ë—É–º–∞–≥–∞! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
		}
	}

	if botTry == try {
		return ctx.Send("–ù–∏—á—å—è!")
	}

	return ctx.Send("–ö–∞–∂–µ—Ç—Å—è –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
}

func (bot *UpgradeBot) AddTaskHandler(ctx telebot.Context) error {
	var (
		description string
		end_date    string
	)

	ctx.Send("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ –∑–∞–¥–∞—á–µ")
Title:
	input := ctx.Get()

	if len(input) == 0 {
		goto Title
	}

	title := input[0]
	ctx.Send("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ " + title)
	time.Sleep(1 * time.Second)
Description:
	input = ctx.Args()
	description = ""

	if len(input) == 0 {
		time.Sleep(1 * time.Second)
		goto Description
	}

	description = strings.Join(input, " ")
	ctx.Send("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∫ –∑–∞–¥–∞—á–µ " + title)
	time.Sleep(1 * time.Second)
End_date:
	input = ctx.Args()
	end_date = "–Ω–µ—Ç —Å—Ä–æ–∫–æ–≤"

	if len(input) == 0 {
		time.Sleep(1 * time.Second)
		goto End_date
	}

	end_date = strings.Join(input, " ")

	newTask := models.Task{
		Title:       title,
		Description: description,
		End_date:    end_date,
	}

	existTask, err := bot.Tasks.FindSame(title, description)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ %v", err)
	}

	if existTask == nil {
		err := bot.Tasks.Create(newTask)

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ %v", err)
		}
	}

	return ctx.Send("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: " + title + "\n " + description + "\n –î–µ–¥–ª–∞–π–Ω: " + end_date)

}

func InitBot(token string) *telebot.Bot {
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	b, err := telebot.NewBot(pref)

	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ %v", err)
	}

	return b
}
